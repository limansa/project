--- fork_mice.c	2009-01-11 15:01:41.000000000 +0800
+++ pthread_mice.c	2009-01-11 14:36:53.000000000 +0800
@@ -1,34 +1,49 @@
 #include <stdio.h>
+#include <stdlib.h>
 #include <sys/time.h>
 #include <sys/types.h>
 #include <unistd.h>
 #include <sys/stat.h>
 #include <fcntl.h>
-
+#include <pthread.h>
 #define QUIT "quit"
 
-int handle_key();
-int handle_mice();
+void * handle_key(void *);
+void * handle_mice(void *);
 
-typedef int (*HANDLER)(void);
+typedef void * (*HANDLER)(void *);
 
 #define MYJOBS 2
+//#define USE_THREAD
 
 int main(void) {
  
- int i;
+ int i,ret;
  int  n_child=MYJOBS;
  pid_t childpid;
 
+ 
+ pthread_t tid[MYJOBS];
  HANDLER do_job[MYJOBS]={handle_key,handle_mice};
   
   for (i = 0; i < n_child; i++) {
+#ifdef USE_THREAD
+	
+	ret = pthread_create(&tid[i], NULL, do_job[i],0);
+        if (ret!=0) {
+          fprintf(stderr, "Failed to create thread\n");
+           exit (-1);	  
+	};
+
+
+#else
 	if ((childpid = fork())==0) {
 	 fprintf(stderr, "i:%d process ID:%ld parent ID:%ld child ID:%ld ..\n",
 	  i, (long)getpid(), (long)getppid(), (long)childpid);
-	   do_job[i]();
+	   do_job[i](NULL);
 	   break;
        }
+#endif
  }
 
   while(1);
@@ -37,7 +52,7 @@
 }
 
 
-int handle_key() 
+void * handle_key(void * arg) 
 {
 
     char tmp[128];
@@ -53,10 +68,10 @@
             }
         }
    }
-  return 0;
+  return (void *)0;
 }
 
-int handle_mice()
+void * handle_mice(void * arg)
 {
  
     
@@ -68,7 +83,7 @@
     if(!mice_fd)
     {
         printf("Failed to open \"/dev/input/mice\"\n");
-        return -1;
+        return (void *)0;
     }
 
   while(1) {
@@ -79,7 +94,7 @@
 
   }
     close(mice_fd);
-   return 0;
+   return (void *)0;
 
 }
 
